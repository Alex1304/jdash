"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[903],{4304:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var t=a(4848),r=a(8453);const i={title:"Introduction",slug:"/"},l=void 0,s={id:"intro",title:"Introduction",description:"What is JDash?",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/",permalink:"/",draft:!1,unlisted:!1,editUrl:"https://github.com/Alex1304/jdash/edit/master/website/docs/intro.mdx",tags:[],version:"current",frontMatter:{title:"Introduction",slug:"/"},sidebar:"someSidebar",next:{title:"JDash Client",permalink:"/jdash-client"}},o={},d=[{value:"What is JDash?",id:"what-is-jdash",level:2},{value:"Overview",id:"overview",level:2},{value:"JDash Client module",id:"jdash-client-module",level:3},{value:"JDash Events module",id:"jdash-events-module",level:3},{value:"JDash Graphics module",id:"jdash-graphics-module",level:3},{value:"Example 1: Generate an arbitrary player icon",id:"example-1-generate-an-arbitrary-player-icon",level:4},{value:"Example 2: Generate the full icon set of a <code>GDUserProfile</code>",id:"example-2-generate-the-full-icon-set-of-a-gduserprofile",level:4},{value:"Example 3: Generate an arbitrary difficulty icon",id:"example-3-generate-an-arbitrary-difficulty-icon",level:4},{value:"Example 4: Generate the difficulty icon of a <code>GDLevel</code>",id:"example-4-generate-the-difficulty-icon-of-a-gdlevel",level:4},{value:"JDash Common module",id:"jdash-common-module",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"what-is-jdash",children:"What is JDash?"}),"\n",(0,t.jsx)(n.p,{children:"JDash is a fast, reactive and un-opinionated Geometry Dash API wrapper for Java. This library aims at providing Java developers tools to deal with game data in the highest standards of quality and developer experience."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["JDash is a multi-module library ",(0,t.jsxs)(n.strong,{children:["requiring ",(0,t.jsx)(n.a,{href:"https://adoptium.net",children:"JDK 17"})," or above since version 5.0.0"]}),". There are currently 4 modules."]}),"\n",(0,t.jsx)(n.h3,{id:"jdash-client-module",children:"JDash Client module"}),"\n",(0,t.jsxs)(n.p,{children:["Provides a high-level client to request data from Geometry Dash servers. It is powered by ",(0,t.jsx)(n.a,{href:"https://projectreactor.io",children:"Project Reactor"})," which allows to make requests in an efficient and non-blocking manner with backpressure handling (requests are queued internally and processed when resources are available, allowing requests to fail-fast in case the queue is full)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"GDClient client = GDClient.create();\n\n// Block until request completes\nGDLevel level = client.findLevelById(10565740).block();\nSystem.out.println(level);\n\n// But we can also choose to make it asychronous and non-blocking\nclient.getUserProfile(98006).subscribe(System.out::println); // will not block\n"})}),"\n",(0,t.jsx)(n.p,{children:"Maven dependency:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.alex1304.jdash</groupId>\n    <artifactId>jdash-client</artifactId>\n    <version>${version}</version> \x3c!-- replace with latest version --\x3e\n</dependency>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"jdash-events-module",children:"JDash Events module"}),"\n",(0,t.jsxs)(n.p,{children:["Provides an event loop that can be subscribed to in order to periodically send requests with a ",(0,t.jsx)(n.code,{children:"GDClient"})," and emit events when changes are detected on the server. It comes with default implementations that can detect when new levels or lists get rated, and when the Daily level or Weekly demon changes. You may also implement your own events with the ",(0,t.jsx)(n.code,{children:"GDEventProducer"})," interface."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'GDClient client = GDClient.create();\nGDEventLoop eventLoop = GDEventLoop.startWithDefaults(client);\n\neventLoop.on(AwardedLevelAdd.class)\n        .subscribe(event -> System.out.println("New level rated: "\n                + event.addedLevel().name()));\n\neventLoop.on(DailyLevelChange.class)\n        .subscribe(event -> System.out.println("New Daily level: "\n                + event.after().name()));\n'})}),"\n",(0,t.jsx)(n.p,{children:"Maven dependency:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.alex1304.jdash</groupId>\n    <artifactId>jdash-events</artifactId>\n    <version>${version}</version> \x3c!-- replace with latest version --\x3e\n</dependency>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"jdash-graphics-module",children:"JDash Graphics module"}),"\n",(0,t.jsx)(n.p,{children:"Allows to generate player icons and level difficulty icons from game assets."}),"\n",(0,t.jsx)(n.h4,{id:"example-1-generate-an-arbitrary-player-icon",children:"Example 1: Generate an arbitrary player icon"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"IconRenderer renderer = IconRenderer.load(IconType.SPIDER, 15);\nColorSelection color = new ColorSelection(12, 9, OptionalInt.of(9));\nBufferedImage output = renderer.render(color);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"icon",src:a(530).A+"",width:"159",height:"121"})}),"\n",(0,t.jsxs)(n.h4,{id:"example-2-generate-the-full-icon-set-of-a-gduserprofile",children:["Example 2: Generate the full icon set of a ",(0,t.jsx)(n.code,{children:"GDUserProfile"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"GDClient client = GDClient.create();\nGDUserProfile user = client.getUserProfile(98006).block();\nIconSetFactory factory = IconSetFactory.forUser(user);\nBufferedImage output = factory.createIconSet();\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"icon",src:a(3137).A+"",width:"1800",height:"200"})}),"\n",(0,t.jsx)(n.h4,{id:"example-3-generate-an-arbitrary-difficulty-icon",children:"Example 3: Generate an arbitrary difficulty icon"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"BufferedImage image = DifficultyRenderer.create(DemonDifficulty.EASY)\n        .withMoons(10)\n        .withQualityRating(QualityRating.LEGENDARY)\n        .render();\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"icon",src:a(3418).A+"",width:"250",height:"350"})}),"\n",(0,t.jsxs)(n.h4,{id:"example-4-generate-the-difficulty-icon-of-a-gdlevel",children:["Example 4: Generate the difficulty icon of a ",(0,t.jsx)(n.code,{children:"GDLevel"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"GDClient client = GDClient.create();\nGDLevel level = client.findLevelById(10565740).block();\nBufferedImage image = DifficultyRenderer.forLevel(level).render();\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"icon",src:a(8814).A+"",width:"250",height:"350"})}),"\n",(0,t.jsx)(n.p,{children:"Maven dependency:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.alex1304.jdash</groupId>\n    <artifactId>jdash-graphics</artifactId>\n    <version>${version}</version> \x3c!-- replace with latest version --\x3e\n</dependency>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"jdash-common-module",children:"JDash Common module"}),"\n",(0,t.jsx)(n.p,{children:"Contains utility classes and data types to encode the different entities of Geometry Dash (levels, users...) required by all other modules."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"If you are already using one of the other modules, you don't need to add this dependency as other modules transitively require it."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.alex1304.jdash</groupId>\n    <artifactId>jdash-common</artifactId>\n    <version>${version}</version> \x3c!-- replace with latest version --\x3e\n</dependency>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Read the next guides to have more in-depth understanding on each of the modules described above."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},3418:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/demon-easy-10-stars-legendary-ab6145dfe783fba65a8f280d07e2ece9.png"},3137:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/iconSet-9a4f1fa5ed5a0509a7e34d971f53761e.png"},8814:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/level-7ece408c32ecf2b8c4c2bc24e9daad82.png"},530:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/spider-15-35e4e8ad5c52607914f8f9554e72a59c.png"},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>s});var t=a(6540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);